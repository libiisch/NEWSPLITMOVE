#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define STEPX_PIN 4
#define DIRX_PIN 10
#define STEPY_PIN 11
#define DIRY_PIN 8

#define limbX 3 // "limb" stands for "limit button", therfore limit button X.
#define limbY 2 // limit button Y.

int spin = 400; // One full step for HALF stepper motor steps
const int VRX_PIN = A0;
const int VRY_PIN = A1;
const int SW_PIN = 7;
int Xcoords = 0;
int NO_MOVEMENT = 0;         // When axis is 0, the motor doesn't receive a step pulse, so it doesn't move.

unsigned long lastClickedX = millis(); // Store the current time in milliseconds
unsigned long lastClickedY = millis(); // Store the current time for Y as well

LiquidCrystal_I2C lcd(0x27, 16, 2);  // lcd library

void setup() {
  pinMode(STEPX_PIN, OUTPUT);
  pinMode(DIRX_PIN, OUTPUT);
  pinMode(STEPY_PIN, OUTPUT);
  pinMode(DIRY_PIN, OUTPUT);

  pinMode(limbX, INPUT_PULLUP); // Neutral state = 1 for limit button X
  pinMode(limbY, INPUT_PULLUP); // Neutral state = 1 for limit button Y

  lcd.init();
  lcd.backlight();

  Serial.begin(9600);
  Serial.println("setup finished, wait for home.");

  attachInterrupt(digitalPinToInterrupt(limbX), btnClickedX, CHANGE); // Whenever limbX is in falling state, activate ISR btnClickedX.
  attachInterrupt(digitalPinToInterrupt(limbY), btnClickedY, CHANGE); // Whenever limbY is in falling state, activate ISR btnClickedY.

  home(); // Resets x,y's positions to their set home every upload.
  //Serial.println("done setup");

}

void loop() {
  checkMovementX();
  checkMovementY();
  coordinations();
}


void btnClickedX() { // Not only - but also a debouncer.
  unsigned long currentTime = millis(); // New value in millis to represent the current time in millis since upload.

  if (currentTime - lastClickedX > 100) { // If the last click happened more than 100 millis ago, accept new one.
    XREVERSE(); // *******this is the X reverse function to call a reverse movement when limbX is pressed. this switch the globalBTNPress method.********
    //xreverse(10, 400, 1);
    Serial.println("limbx reached!");
    lastClickedX = currentTime; // Sets the last click's timestamp to the latest timestamp a click has occured on.
  }
}

void btnClickedY() { // Not only - but also a debouncer.
  unsigned long currentTime = millis(); // New value in millis to represent the current time in millis since upload.

  if (currentTime - lastClickedY > 100) { // If the last click happened more than 100 millis ago, accept new one.
    YREVERSE(); // *******this is the X reverse function to call a reverse movement when limbX is pressed. this switch the globalBTNPress method.********
    //break;
    Serial.println("limby reached!");
    lastClickedX = currentTime; // Sets the last click's timestamp to the latest timestamp a click has occured on.
  }
}


int checkMovementX() {
  int x = analogRead(VRX_PIN);
  //Serial.println("moving on x");

  if (x > 600) {
    MOVEX(spin, 300, HIGH);

  } else if (x < 400) {
    MOVEX(spin, 300, LOW);
  } else {
    return NO_MOVEMENT;
  }
}

int checkMovementY() {
  int y = analogRead(VRY_PIN);
  //Serial.println("moving on y");

  if (y > 600) {
    MOVEY(spin, 350, LOW);

  } else if (y < 400) {
    MOVEY(spin, 350, HIGH);
  } else {
    return NO_MOVEMENT;
  }
}


void MOVEX(int steps, int speed, bool direction) {
  digitalWrite(DIRX_PIN, direction);

  for (int i = 0; i < steps; i++) {
    digitalWrite(STEPX_PIN, HIGH);
    delayMicroseconds(speed);
    digitalWrite(STEPX_PIN, LOW);
    delayMicroseconds(speed);
  }
}

void XREVERSE() {
  MOVEX(100, 300, 0); //4510 steps for full X
}


void MOVEY(int steps, int speed, bool direction) {
  digitalWrite(DIRY_PIN, direction);

  for (int i = 0; i < steps; i++) {
    digitalWrite(STEPY_PIN, HIGH);
    delayMicroseconds(speed);
    digitalWrite(STEPY_PIN, LOW);
    delayMicroseconds(speed);
  }
}

void YREVERSE() {
  MOVEY(100, 300, 0);//2130 steps for full y 
}


void home() {
  //Serial.println("starting home");
  lcd.setCursor(3, 0);
  lcd.print("hello! :)");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("one second, I'm");
  lcd.setCursor(0,1);
  lcd.print("going home...");

  MOVEX(4510, 300, HIGH);   // true = x
  MOVEY(4510, 300, HIGH);   // false = y

  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("I've arrived");
  lcd.setCursor(5,1);
  lcd.print("home!");
  delay(1000);
  lcd.clear();

  lcd.setCursor(1,0);
  lcd.print("enjoy playing!");
  lcd.setCursor(6,1);
  lcd.print("<3");
  delay(1500);
  lcd.clear();
}

void coordinations() {  // print on LCD x,y coordinations.

  lcd.setCursor(4, 0);
  lcd.print("X  |  Y");
  lcd.setCursor(7, 1);
  lcd.print("|");

  lcd.setCursor(3, 1);
  lcd.print(analogRead(VRX_PIN));
  if (analogRead(VRX_PIN) < 1000) {  // fixed numbers bug
    lcd.setCursor(6, 1);
    lcd.print(" ");
  }

  lcd.setCursor(9, 1);
  lcd.print(analogRead(VRY_PIN));
  if (analogRead(VRY_PIN) < 1000) {  // fixed numbers bug
    lcd.setCursor(12, 1);
    lcd.print(" ");
  }
}
